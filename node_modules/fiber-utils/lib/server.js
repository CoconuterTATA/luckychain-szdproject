// Generated by CoffeeScript 1.12.4
(function() {
  var FiberUtils, OrderedFence,
    slice = [].slice;

  FiberUtils = require('./base').FiberUtils;

  OrderedFence = require('./fence').OrderedFence;

  FiberUtils.prototype.sleep = function(ms) {
    var future;
    future = new this.Future();
    setTimeout(function() {
      return future["return"]();
    }, ms);
    future.wait();
  };

  FiberUtils.prototype.wrap = function(f, scope) {
    if (scope == null) {
      scope = null;
    }
    return (function(_this) {
      return function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return _this.Future.wrap(f).apply(scope, args).wait();
      };
    })(this);
  };

  FiberUtils.prototype["in"] = function(f, scope, handleErrors) {
    if (scope == null) {
      scope = null;
    }
    if (handleErrors == null) {
      handleErrors = null;
    }
    return (function(_this) {
      return function() {
        var args, error;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (_this.Fiber.current) {
          try {
            f.apply(scope, args);
          } catch (error1) {
            error = error1;
            if (handleErrors) {
              handleErrors.call(scope, error);
            } else {
              throw error;
            }
          }
        } else {
          new _this.Fiber(function() {
            try {
              return f.apply(scope, args);
            } catch (error1) {
              error = error1;
              if (handleErrors) {
                return handleErrors.call(scope, error);
              } else {
                throw error;
              }
            }
          }).run();
        }
      };
    })(this);
  };

  FiberUtils.prototype.ensure = function(f, scope, handleErrors) {
    if (scope == null) {
      scope = null;
    }
    if (handleErrors == null) {
      handleErrors = null;
    }
    this["in"](f, scope, handleErrors)();
  };

  FiberUtils.prototype.synchronize = function(guardObject, uniqueId, f, options) {
    var guards, topLevel;
    if (options == null) {
      options = {};
    }
    guards = guardObject._guards != null ? guardObject._guards : guardObject._guards = {};
    if (guards[uniqueId] == null) {
      guards[uniqueId] = new OrderedFence(this.Fiber, this.Future, options);
    }
    topLevel = guards[uniqueId].enter();
    try {
      return f();
    } finally {
      guards[uniqueId].exit(topLevel);
      if (uniqueId in guards && !guards[uniqueId].isInUse()) {
        delete guards[uniqueId];
      }
    }
  };

  module.exports = {
    FiberUtils: FiberUtils
  };

}).call(this);

//# sourceMappingURL=server.js.map
